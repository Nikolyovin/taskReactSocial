{"ast":null,"code":"const ADD_POST = 'ADD_POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT';\nlet initialState = {\n  //в каждом редйюсере свой initialState\n  posts: [{\n    id: 1,\n    message: 'Hello, yow are you?',\n    likesCount: 15\n  }, {\n    id: 2,\n    message: \"It's my first post\",\n    likesCount: 20\n  }, {\n    id: 3,\n    message: 'Blabla',\n    likesCount: 15\n  }, {\n    id: 4,\n    message: 'dadadad',\n    likesCount: 15\n  }],\n  newPostText: 'it-kamasutra.com'\n};\n\nconst profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return { ...state,\n        //чтобы зименить state мы делаем копию объекта\n        posts: [...state.posts, {\n          id: 5,\n          message: state.newPostText,\n          likesCount: 0\n        }],\n        //и копируем сам массив posts, в который хотим запушить и пушим\n        newPostText: ''\n      };\n\n    case UPDATE_NEW_POST_TEXT:\n      return { ...state,\n        //делаем копию \n        newPostText: action.newText //добавляем введенный текст\n\n      };\n\n    default:\n      //дефолтный кейс, если не найдется такого экшена\n      return state;\n  }\n}; ////test\n\n\nexport default profileReducer;\nexport const addPostActionCreator = () => ({\n  type: ADD_POST\n}); //экспортируем экшн, где в типе ADD_POST, который потом придет в редюсер\n\nexport const updateNewPostTextActionCreator = text => ({\n  type: UPDATE_NEW_POST_TEXT,\n  newText: text\n});","map":{"version":3,"names":["ADD_POST","UPDATE_NEW_POST_TEXT","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newText","addPostActionCreator","updateNewPostTextActionCreator","text"],"sources":["D:/USER/#/projects/taskReactSocial/taskReactSocial/src/redux/profile-reducer.js"],"sourcesContent":["const ADD_POST = 'ADD_POST'\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT'\r\n\r\nlet initialState = {                                        //в каждом редйюсере свой initialState\r\n   posts: [\r\n      { id: 1, message: 'Hello, yow are you?', likesCount: 15 },\r\n      { id: 2, message: \"It's my first post\", likesCount: 20 },\r\n      { id: 3, message: 'Blabla', likesCount: 15 },\r\n      { id: 4, message: 'dadadad', likesCount: 15 },\r\n   ],\r\n   newPostText: 'it-kamasutra.com'\r\n}\r\n\r\n\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case ADD_POST:\r\n         return {\r\n            ...state,                                                       //чтобы зименить state мы делаем копию объекта\r\n            posts:[...state.posts, {id:5, message: state.newPostText, likesCount: 0}], //и копируем сам массив posts, в который хотим запушить и пушим\r\n            newPostText: '',   \r\n         }                \r\n         \r\n      case UPDATE_NEW_POST_TEXT:                 \r\n         return {\r\n            ...state,                                      //делаем копию \r\n            newPostText:action.newText                     //добавляем введенный текст\r\n         }                              \r\n         \r\n      default:                                          //дефолтный кейс, если не найдется такого экшена\r\n         return state\r\n   }\r\n\r\n}\r\n////test\r\n\r\nexport default profileReducer\r\nexport const addPostActionCreator = () => ({ type: ADD_POST })    //экспортируем экшн, где в типе ADD_POST, который потом придет в редюсер\r\nexport const updateNewPostTextActionCreator = (text) => ({ type: UPDATE_NEW_POST_TEXT, newText: text })"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;AAEA,IAAIC,YAAY,GAAG;EAAyC;EACzDC,KAAK,EAAE,CACJ;IAAEC,EAAE,EAAE,CAAN;IAASC,OAAO,EAAE,qBAAlB;IAAyCC,UAAU,EAAE;EAArD,CADI,EAEJ;IAAEF,EAAE,EAAE,CAAN;IAASC,OAAO,EAAE,oBAAlB;IAAwCC,UAAU,EAAE;EAApD,CAFI,EAGJ;IAAEF,EAAE,EAAE,CAAN;IAASC,OAAO,EAAE,QAAlB;IAA4BC,UAAU,EAAE;EAAxC,CAHI,EAIJ;IAAEF,EAAE,EAAE,CAAN;IAASC,OAAO,EAAE,SAAlB;IAA6BC,UAAU,EAAE;EAAzC,CAJI,CADS;EAOhBC,WAAW,EAAE;AAPG,CAAnB;;AAYA,MAAMC,cAAc,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBP,YAAyB;EAAA,IAAXQ,MAAW;;EACtD,QAAQA,MAAM,CAACC,IAAf;IACG,KAAKX,QAAL;MACG,OAAO,EACJ,GAAGS,KADC;QAC4D;QAChEN,KAAK,EAAC,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAiB;UAACC,EAAE,EAAC,CAAJ;UAAOC,OAAO,EAAEI,KAAK,CAACF,WAAtB;UAAmCD,UAAU,EAAE;QAA/C,CAAjB,CAFF;QAEuE;QAC3EC,WAAW,EAAE;MAHT,CAAP;;IAMH,KAAKN,oBAAL;MACG,OAAO,EACJ,GAAGQ,KADC;QAC2C;QAC/CF,WAAW,EAACG,MAAM,CAACE,OAFf,CAE2C;;MAF3C,CAAP;;IAKH;MAAkD;MAC/C,OAAOH,KAAP;EAfN;AAkBF,CAnBD,C,CAoBA;;;AAEA,eAAeD,cAAf;AACA,OAAO,MAAMK,oBAAoB,GAAG,OAAO;EAAEF,IAAI,EAAEX;AAAR,CAAP,CAA7B,C,CAA2D;;AAClE,OAAO,MAAMc,8BAA8B,GAAIC,IAAD,KAAW;EAAEJ,IAAI,EAAEV,oBAAR;EAA8BW,OAAO,EAAEG;AAAvC,CAAX,CAAvC"},"metadata":{},"sourceType":"module"}