{"ast":null,"code":"var _jsxFileName = \"D:\\\\USER\\\\#\\\\projects\\\\taskReactSocial\\\\taskReactSocial\\\\src\\\\companents\\\\Users\\\\UsersContainer.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { followAC, setCurrentPageAC, setTotalUserCountAC, setUsersAC, toggaleIsFetchingAC, unfollowAC } from \"../../redux/users-reducer\";\nimport * as axios from \"axios\";\nimport Users from \"./Users\";\nimport preloader from \"../../assets/images/Gear.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UsersContainer extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.toggaleIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        //отправляем get запрос на сервак .then(response(когда запрос выполниться пишем логики что нужно сделать)\n        this.props.toggaleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggaleIsFetching(true); //иконка загрузки\n\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      //отправляем get запрос на сервак .then(response(когда запрос выполниться пишем логику что нужно сделать)\n      this.props.toggaleIsFetching(false);\n      this.props.setUsers(response.data.items); //это наш массив пользователей который отдает нам сервак\n\n      this.props.setTotalUserCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: preloader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 34\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        users: this.props.users,\n        onPageChanged: this.onPageChanged,\n        unfollow: this.props.unfollow,\n        follow: this.props.follow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  //берет весь state, а отдает через props тот о котором можно знать чистой функции\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUserCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    follow: userId => {\n      //через пропсы передаем эшкн, через экшнкреейтор\n      dispatch(followAC(userId));\n    },\n    unfollow: userId => {\n      dispatch(unfollowAC(userId));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: pageNumber => {\n      dispatch(setCurrentPageAC(pageNumber));\n    },\n    setTotalUserCount: totalCount => {\n      dispatch(setTotalUserCountAC(totalCount));\n    },\n    toggaleIsFetching: isFetching => {\n      dispatch(toggaleIsFetchingAC(isFetching));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);","map":{"version":3,"names":["React","connect","followAC","setCurrentPageAC","setTotalUserCountAC","setUsersAC","toggaleIsFetchingAC","unfollowAC","axios","Users","UsersContainer","Component","onPageChanged","pageNumber","props","toggaleIsFetching","setCurrentPage","get","pageSize","then","response","setUsers","data","items","componentDidMount","currentPage","setTotalUserCount","totalCount","render","isFetching","preloader","totalUsersCount","users","unfollow","follow","mapStateToProps","state","usersPage","totalUserCount","mapDispatchToProps","dispatch","userId"],"sources":["D:/USER/#/projects/taskReactSocial/taskReactSocial/src/companents/Users/UsersContainer.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  followAC,\r\n  setCurrentPageAC,\r\n  setTotalUserCountAC,\r\n  setUsersAC,\r\n  toggaleIsFetchingAC,\r\n  unfollowAC,\r\n} from \"../../redux/users-reducer\";\r\nimport * as axios from \"axios\";\r\nimport Users from \"./Users\";\r\nimport preloader from \"../../assets/images/Gear.svg\";\r\n\r\nclass UsersContainer extends React.Component {\r\n  componentDidMount() {\r\n    this.props.toggaleIsFetching(true) //иконка загрузки\r\n    axios\r\n      .get(\r\n        `https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`\r\n      )\r\n      .then((response) => {\r\n        //отправляем get запрос на сервак .then(response(когда запрос выполниться пишем логику что нужно сделать)\r\n        this.props.toggaleIsFetching(false)\r\n        this.props.setUsers(response.data.items); //это наш массив пользователей который отдает нам сервак\r\n        this.props.setTotalUserCount(response.data.totalCount);\r\n      });\r\n  }\r\n\r\n  onPageChanged = (pageNumber) => {\r\n    this.props.toggaleIsFetching(true)\r\n    this.props.setCurrentPage(pageNumber);\r\n    axios\r\n      .get(\r\n        `https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`\r\n      )\r\n      .then((response) => {\r\n        //отправляем get запрос на сервак .then(response(когда запрос выполниться пишем логики что нужно сделать)\r\n        this.props.toggaleIsFetching(false)\r\n        this.props.setUsers(response.data.items);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.isFetching ? <img src={preloader} /> : null}\r\n        <Users\r\n          totalUsersCount={this.props.totalUsersCount}\r\n          pageSize={this.props.pageSize}\r\n          currentPage={this.props.currentPage}\r\n          users={this.props.users}\r\n          onPageChanged={this.onPageChanged}\r\n          unfollow={this.props.unfollow}\r\n          follow={this.props.follow}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  //берет весь state, а отдает через props тот о котором можно знать чистой функции\r\n  return {\r\n    users: state.usersPage.users,\r\n    pageSize: state.usersPage.pageSize,\r\n    totalUsersCount: state.usersPage.totalUserCount,\r\n    currentPage: state.usersPage.currentPage,\r\n    isFetching: state.usersPage.isFetching,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    follow: (userId) => {\r\n      //через пропсы передаем эшкн, через экшнкреейтор\r\n      dispatch(followAC(userId));\r\n    },\r\n    unfollow: (userId) => {\r\n      dispatch(unfollowAC(userId));\r\n    },\r\n    setUsers: (users) => {\r\n      dispatch(setUsersAC(users));\r\n    },\r\n    setCurrentPage: (pageNumber) => {\r\n      dispatch(setCurrentPageAC(pageNumber));\r\n    },\r\n    setTotalUserCount: (totalCount) => {\r\n      dispatch(setTotalUserCountAC(totalCount));\r\n    },\r\n    toggaleIsFetching: (isFetching) => {\r\n      dispatch(toggaleIsFetchingAC(isFetching));\r\n    },\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}