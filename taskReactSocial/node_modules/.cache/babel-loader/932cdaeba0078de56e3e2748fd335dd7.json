{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USER_COUNT = 'SET_TOTAL_USER_COUNT';\nlet initialState = {\n  //в каждом редйюсере свой initialState\n  users: [],\n  pageSize: 5,\n  totalUserCount: 0,\n  currentPage: 1,\n  isFetching: true\n};\n\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(user => {\n          //т.к. map возвращает новый массив, то не нужно делать копию \n          if (user.id === action.userId) {\n            //по id находим нужного человека\n            return { ...user,\n              followed: true\n            }; //если id совпадает, то возвращаем копию user из мапа с измененным followed\n          }\n\n          return user; //если не совпадает, то возвращаем тот же самый объект\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(user => {\n          //т.к. map возвращает новый массив, то не нужно делать копию \n          if (user.id === action.userId) {\n            //по id находим нужного человека\n            return { ...user,\n              followed: false\n            }; //если id совпадает, то возвращаем копию user из мапа с измененным followed\n          }\n\n          return user; //если не совпадает, то возвращаем тот же самый объект\n        })\n      };\n\n    case SET_USERS:\n      {\n        //к нам приходят юзеры с сервера\n        //мы копируем state берем старых пользователей, соеденяем их с новыми с сервера и перезатираем их новыми\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USER_COUNT:\n      {\n        return { ...state,\n          totalUserCount: action.count\n        };\n      }\n\n    default:\n      //дефолтный кейс, если не найдется такого экшена\n      return state;\n  }\n};\n\nexport const followAC = userId => ({\n  type: FOLLOW,\n  userId\n}); //экспортируем экшн c userId(чтобы было понятно на кого подпичываться), который потом придет в редюсер\n\nexport const unfollowAC = userId => ({\n  type: UNFOLLOW,\n  userId\n}); //экспортируем экшн c userId, который потом придет в редюсер\n\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPageAC = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUserCountAC = totalUserCount => ({\n  type: SET_TOTAL_USER_COUNT,\n  count: totalUserCount\n});\nexport default usersReducer;","map":{"version":3,"names":["FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USER_COUNT","initialState","users","pageSize","totalUserCount","currentPage","isFetching","usersReducer","state","action","type","map","user","id","userId","followed","count","followAC","unfollowAC","setUsersAC","setCurrentPageAC","setTotalUserCountAC"],"sources":["D:/USER/#/projects/taskReactSocial/taskReactSocial/src/redux/users-reducer.js"],"sourcesContent":["const FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS='SET_USERS'\r\nconst SET_CURRENT_PAGE='SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT='SET_TOTAL_USER_COUNT'\r\n\r\nlet initialState = {                                        //в каждом редйюсере свой initialState\r\n   users:[],\r\n   pageSize: 5,\r\n   totalUserCount: 0,\r\n   currentPage: 1,\r\n   isFetching: true\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case FOLLOW:\r\n         return {\r\n            ...state,\r\n            users: state.users.map(user=>{                         //т.к. map возвращает новый массив, то не нужно делать копию \r\n               if (user.id===action.userId){                       //по id находим нужного человека\r\n                  return {...user, followed:true}            //если id совпадает, то возвращаем копию user из мапа с измененным followed\r\n               }\r\n               return user                                  //если не совпадает, то возвращаем тот же самый объект\r\n            })\r\n         }\r\n\r\n      case UNFOLLOW:\r\n         return {\r\n            ...state,\r\n            users: state.users.map(user=>{                         //т.к. map возвращает новый массив, то не нужно делать копию \r\n               if (user.id===action.userId){                       //по id находим нужного человека\r\n                  return {...user, followed:false}            //если id совпадает, то возвращаем копию user из мапа с измененным followed\r\n               }\r\n               return user                                  //если не совпадает, то возвращаем тот же самый объект\r\n            })\r\n         }\r\n\r\n      case SET_USERS:{                 //к нам приходят юзеры с сервера\r\n         //мы копируем state берем старых пользователей, соеденяем их с новыми с сервера и перезатираем их новыми\r\n         return { ...state, users: action.users}         \r\n      }\r\n\r\n      case SET_CURRENT_PAGE: {\r\n         return { ...state, currentPage: action.currentPage}\r\n      }\r\n\r\n      case SET_TOTAL_USER_COUNT: {\r\n         return { ...state, totalUserCount: action.count}\r\n      }\r\n\r\n      default:                                          //дефолтный кейс, если не найдется такого экшена\r\n         return state\r\n   }\r\n\r\n}\r\n\r\nexport const followAC = (userId) => ({ type: FOLLOW, userId })    //экспортируем экшн c userId(чтобы было понятно на кого подпичываться), который потом придет в редюсер\r\nexport const unfollowAC = (userId) => ({ type: UNFOLLOW, userId}) //экспортируем экшн c userId, который потом придет в редюсер\r\nexport const setUsersAC=(users)=>({type:SET_USERS, users})\r\nexport const setCurrentPageAC = (currentPage) => ({ type:SET_CURRENT_PAGE, currentPage })\r\nexport const setTotalUserCountAC = (totalUserCount) => ({ type:SET_TOTAL_USER_COUNT, count: totalUserCount })\r\n\r\n\r\n\r\nexport default usersReducer\r\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAC,WAAhB;AACA,MAAMC,gBAAgB,GAAC,kBAAvB;AACA,MAAMC,oBAAoB,GAAC,sBAA3B;AAEA,IAAIC,YAAY,GAAG;EAAyC;EACzDC,KAAK,EAAC,EADU;EAEhBC,QAAQ,EAAE,CAFM;EAGhBC,cAAc,EAAE,CAHA;EAIhBC,WAAW,EAAE,CAJG;EAKhBC,UAAU,EAAE;AALI,CAAnB;;AAQA,MAAMC,YAAY,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBP,YAAyB;EAAA,IAAXQ,MAAW;;EACpD,QAAQA,MAAM,CAACC,IAAf;IACG,KAAKd,MAAL;MACG,OAAO,EACJ,GAAGY,KADC;QAEJN,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYS,GAAZ,CAAgBC,IAAI,IAAE;UAA0B;UACpD,IAAIA,IAAI,CAACC,EAAL,KAAUJ,MAAM,CAACK,MAArB,EAA4B;YAAwB;YACjD,OAAO,EAAC,GAAGF,IAAJ;cAAUG,QAAQ,EAAC;YAAnB,CAAP,CADyB,CACkB;UAC7C;;UACD,OAAOH,IAAP,CAJ0B,CAImB;QAC/C,CALM;MAFH,CAAP;;IAUH,KAAKf,QAAL;MACG,OAAO,EACJ,GAAGW,KADC;QAEJN,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYS,GAAZ,CAAgBC,IAAI,IAAE;UAA0B;UACpD,IAAIA,IAAI,CAACC,EAAL,KAAUJ,MAAM,CAACK,MAArB,EAA4B;YAAwB;YACjD,OAAO,EAAC,GAAGF,IAAJ;cAAUG,QAAQ,EAAC;YAAnB,CAAP,CADyB,CACmB;UAC9C;;UACD,OAAOH,IAAP,CAJ0B,CAImB;QAC/C,CALM;MAFH,CAAP;;IAUH,KAAKd,SAAL;MAAe;QAAkB;QAC9B;QACA,OAAO,EAAE,GAAGU,KAAL;UAAYN,KAAK,EAAEO,MAAM,CAACP;QAA1B,CAAP;MACF;;IAED,KAAKH,gBAAL;MAAuB;QACpB,OAAO,EAAE,GAAGS,KAAL;UAAYH,WAAW,EAAEI,MAAM,CAACJ;QAAhC,CAAP;MACF;;IAED,KAAKL,oBAAL;MAA2B;QACxB,OAAO,EAAE,GAAGQ,KAAL;UAAYJ,cAAc,EAAEK,MAAM,CAACO;QAAnC,CAAP;MACF;;IAED;MAAkD;MAC/C,OAAOR,KAAP;EArCN;AAwCF,CAzCD;;AA2CA,OAAO,MAAMS,QAAQ,GAAIH,MAAD,KAAa;EAAEJ,IAAI,EAAEd,MAAR;EAAgBkB;AAAhB,CAAb,CAAjB,C,CAA2D;;AAClE,OAAO,MAAMI,UAAU,GAAIJ,MAAD,KAAa;EAAEJ,IAAI,EAAEb,QAAR;EAAkBiB;AAAlB,CAAb,CAAnB,C,CAA2D;;AAClE,OAAO,MAAMK,UAAU,GAAEjB,KAAD,KAAU;EAACQ,IAAI,EAACZ,SAAN;EAAiBI;AAAjB,CAAV,CAAjB;AACP,OAAO,MAAMkB,gBAAgB,GAAIf,WAAD,KAAkB;EAAEK,IAAI,EAACX,gBAAP;EAAyBM;AAAzB,CAAlB,CAAzB;AACP,OAAO,MAAMgB,mBAAmB,GAAIjB,cAAD,KAAqB;EAAEM,IAAI,EAACV,oBAAP;EAA6BgB,KAAK,EAAEZ;AAApC,CAArB,CAA5B;AAIP,eAAeG,YAAf"},"metadata":{},"sourceType":"module"}