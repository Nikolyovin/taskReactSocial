{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nlet initialState = {\n  //в каждом редйюсере свой initialState\n  users: [],\n  pageSize: 5,\n  totalUserCount: 21,\n  currentPage: 2\n};\n\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(user => {\n          //т.к. map возвращает новый массив, то не нужно делать копию \n          if (user.id === action.userId) {\n            //по id находим нужного человека\n            return { ...user,\n              followed: true\n            }; //если id совпадает, то возвращаем копию user из мапа с измененным followed\n          }\n\n          return user; //если не совпадает, то возвращаем тот же самый объект\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(user => {\n          //т.к. map возвращает новый массив, то не нужно делать копию \n          if (user.id === action.userId) {\n            //по id находим нужного человека\n            return { ...user,\n              followed: false\n            }; //если id совпадает, то возвращаем копию user из мапа с измененным followed\n          }\n\n          return user; //если не совпадает, то возвращаем тот же самый объект\n        })\n      };\n\n    case SET_USERS:\n      {\n        //к нам приходят юзеры с сервера\n        //мы копируем state берем старых пользователей, соеденяем их с новыми с сервера и перезатираем их новыми\n        return { ...state,\n          users: [...state.users, ...action.users]\n        };\n      }\n\n    default:\n      //дефолтный кейс, если не найдется такого экшена\n      return state;\n  }\n};\n\nexport const followAC = userId => ({\n  type: FOLLOW,\n  userId\n}); //экспортируем экшн c userId(чтобы было понятно на кого подпичываться), который потом придет в редюсер\n\nexport const unfollowAC = userId => ({\n  type: UNFOLLOW,\n  userId\n}); //экспортируем экшн c userId, который потом придет в редюсер\n\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nexport default usersReducer;","map":{"version":3,"sources":["/home/niko/projects/01-first-project/my-app/src/redux/users-reducer.js"],"names":["FOLLOW","UNFOLLOW","SET_USERS","initialState","users","pageSize","totalUserCount","currentPage","usersReducer","state","action","type","map","user","id","userId","followed","followAC","unfollowAC","setUsersAC"],"mappings":"AAAA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAC,WAAhB;AAEA,IAAIC,YAAY,GAAG;AAAyC;AACzDC,EAAAA,KAAK,EAAC,EADU;AAEhBC,EAAAA,QAAQ,EAAE,CAFM;AAGhBC,EAAAA,cAAc,EAAE,EAHA;AAIhBC,EAAAA,WAAW,EAAE;AAJG,CAAnB;;AASA,MAAMC,YAAY,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACG,SAAKX,MAAL;AACG,aAAO,EACJ,GAAGS,KADC;AAEJL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYQ,GAAZ,CAAgBC,IAAI,IAAE;AAA0B;AACpD,cAAIA,IAAI,CAACC,EAAL,KAAUJ,MAAM,CAACK,MAArB,EAA4B;AAAwB;AACjD,mBAAO,EAAC,GAAGF,IAAJ;AAAUG,cAAAA,QAAQ,EAAC;AAAnB,aAAP,CADyB,CACkB;AAC7C;;AACD,iBAAOH,IAAP,CAJ0B,CAImB;AAC/C,SALM;AAFH,OAAP;;AAUH,SAAKZ,QAAL;AACG,aAAO,EACJ,GAAGQ,KADC;AAEJL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYQ,GAAZ,CAAgBC,IAAI,IAAE;AAA0B;AACpD,cAAIA,IAAI,CAACC,EAAL,KAAUJ,MAAM,CAACK,MAArB,EAA4B;AAAwB;AACjD,mBAAO,EAAC,GAAGF,IAAJ;AAAUG,cAAAA,QAAQ,EAAC;AAAnB,aAAP,CADyB,CACmB;AAC9C;;AACD,iBAAOH,IAAP,CAJ0B,CAImB;AAC/C,SALM;AAFH,OAAP;;AAUH,SAAKX,SAAL;AAAe;AAAkB;AAC9B;AACA,eAAO,EAAE,GAAGO,KAAL;AAAYL,UAAAA,KAAK,EAAC,CAAE,GAAGK,KAAK,CAACL,KAAX,EAAkB,GAAGM,MAAM,CAACN,KAA5B;AAAlB,SAAP;AACF;;AAED;AAAkD;AAC/C,aAAOK,KAAP;AA7BN;AAgCF,CAjCD;;AAmCA,OAAO,MAAMQ,QAAQ,GAAIF,MAAD,KAAa;AAAEJ,EAAAA,IAAI,EAAEX,MAAR;AAAgBe,EAAAA;AAAhB,CAAb,CAAjB,C,CAA2D;;AAClE,OAAO,MAAMG,UAAU,GAAIH,MAAD,KAAa;AAAEJ,EAAAA,IAAI,EAAEV,QAAR;AAAkBc,EAAAA;AAAlB,CAAb,CAAnB,C,CAA2D;;AAClE,OAAO,MAAMI,UAAU,GAAEf,KAAD,KAAU;AAACO,EAAAA,IAAI,EAACT,SAAN;AAAiBE,EAAAA;AAAjB,CAAV,CAAjB;AAEP,eAAeI,YAAf","sourcesContent":["const FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS='SET_USERS'\r\n\r\nlet initialState = {                                        //в каждом редйюсере свой initialState\r\n   users:[],\r\n   pageSize: 5,\r\n   totalUserCount: 21,\r\n   currentPage: 2\r\n}\r\n\r\n\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case FOLLOW:\r\n         return {\r\n            ...state,\r\n            users: state.users.map(user=>{                         //т.к. map возвращает новый массив, то не нужно делать копию \r\n               if (user.id===action.userId){                       //по id находим нужного человека\r\n                  return {...user, followed:true}            //если id совпадает, то возвращаем копию user из мапа с измененным followed\r\n               }\r\n               return user                                  //если не совпадает, то возвращаем тот же самый объект\r\n            })\r\n         }\r\n\r\n      case UNFOLLOW:\r\n         return {\r\n            ...state,\r\n            users: state.users.map(user=>{                         //т.к. map возвращает новый массив, то не нужно делать копию \r\n               if (user.id===action.userId){                       //по id находим нужного человека\r\n                  return {...user, followed:false}            //если id совпадает, то возвращаем копию user из мапа с измененным followed\r\n               }\r\n               return user                                  //если не совпадает, то возвращаем тот же самый объект\r\n            })\r\n         }\r\n\r\n      case SET_USERS:{                 //к нам приходят юзеры с сервера\r\n         //мы копируем state берем старых пользователей, соеденяем их с новыми с сервера и перезатираем их новыми\r\n         return { ...state, users:[ ...state.users, ...action.users]}         \r\n      }\r\n\r\n      default:                                          //дефолтный кейс, если не найдется такого экшена\r\n         return state\r\n   }\r\n\r\n}\r\n\r\nexport const followAC = (userId) => ({ type: FOLLOW, userId })    //экспортируем экшн c userId(чтобы было понятно на кого подпичываться), который потом придет в редюсер\r\nexport const unfollowAC = (userId) => ({ type: UNFOLLOW, userId}) //экспортируем экшн c userId, который потом придет в редюсер\r\nexport const setUsersAC=(users)=>({type:SET_USERS, users})\r\n\r\nexport default usersReducer\r\n"]},"metadata":{},"sourceType":"module"}